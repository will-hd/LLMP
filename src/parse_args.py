from jsonargparse import ArgumentParser, ActionConfigFile

from .hf_api import llm_map

def init_option_parser():
    parser = ArgumentParser()
    parser.add_argument('--cfg', action=ActionConfigFile, help='config file in YAML format')
    parser.add_argument("--mode", choices=["sample_logpy", "sample_only", "logpy_only"], default="sample_logpy",
                        help="Whether to sample or compute log likelihood, or both.")
    parser.add_argument('--experiment_name', type=str, default='test', help='Name of the experiment.')
    parser.add_argument('--data_path', type=str, default='./data/square_20.pkl', help='Path to pkl file with x, y data.')
    parser.add_argument('--llm_path', type=str, default=None, help='Path to LLM.')
    parser.add_argument("--llm_type", choices=llm_map.keys(), default="llama-2-7B",
                        help="Hugging face model to use.")
    parser.add_argument("--prompt_ordering", choices=["sequential", "random", "distance"], default="distance",
                        help="How the observed points in the prompt should be ordered.")
    parser.add_argument('--output_dir', type=str, default='./output',
                        help='Path to directory where output results are written.')
    parser.add_argument('--plot_dir', type=str, default='./plots',
                        help='Path to directory where output plots are written.')
    parser.add_argument('--seed', type=int, default=1)
    parser.add_argument('--num_decimal_places_x', type=int, default=0)
    parser.add_argument('--num_decimal_places_y', type=int, default=2)
    parser.add_argument('--batch_size', type=int, default=5)
    parser.add_argument("--autoregressive", type=bool, default=False,
                        help="If true, append the previous prediction to the current prompt.")
    parser.add_argument('--prefix', type=str, default='', help='Prompt prefix.')
    parser.add_argument('--x_prefix', type=str, default='', help='Prompt x prefix.')
    parser.add_argument('--y_prefix', type=str, default=', ', help='Prompt y prefix.')
    parser.add_argument('--break_str', type=str, default='\n', help='Break string between observed points.')

    # autoregressive mode options
    parser.add_argument('--sort_x_test', type=bool, default=False,
                        help=('If true, sort autoregressive test points by distance to the train points.'))
    parser.add_argument('--forecast', type=bool, default=False,
                        help=('If true, ensure train and test points are sequentially ordered.'))

    # debugging options
    parser.add_argument('--print_prompts', type=bool, default=False, help=('If true print out prompts.'))
    parser.add_argument('--print_logprobs', type=bool, default=False, help=('If true print out log probabilities.'))

    # sampling only options
    parser.add_argument('--num_samples', type=int, default=50, help="Number of samples to take at each test location.")
    parser.add_argument('--temperature', type=float, default=1.0)
    parser.add_argument('--top_p', type=float, default=0.9)
    parser.add_argument('--max_generated_length', type=int, default=7)

    # scaling the input range options
    parser.add_argument('--y_min', type=float, default=None, help="Set the minimum value for the prompt y values.")
    parser.add_argument('--y_max', type=float, default=None, help="Set the maximum value for the prompt y values.")

    # plot options
    parser.add_argument('--plot_trajectories', type=int, default=0, help=('If true plot n sample trajectories.'))

    # logpy options
    parser.add_argument('--specify_xy', type=bool, default=False,
                        help="If True use supplied xs and ys instead of x_test and y_test.")
    # list xs and ys explicitly
    parser.add_argument('--xs', type=float, nargs='+',
                        help=('List of xs to evaluate logprobs at. Only used if specify_xy is True.'))
    parser.add_argument('--ys', type=float, nargs='+',
                        help=('list of ys to evaluate logprobs for. Only used if specify_xy is True.'))
    # specify range of xs and ys that will be generated by a linspace operation
    parser.add_argument('--xs_start', type=float, default=None, help="Set the minimum x value to evaluate logprobs at.")
    parser.add_argument('--xs_end', type=float, default=None, help="Set the maximum x value to evaluate logprobs at.")
    parser.add_argument('--num_xs', type=int, default=None, help="Number of xs to evaluate logprobs at.")
    parser.add_argument('--ys_start', type=float, default=None, help="Set the minimum y value to evaluate logprobs at.")
    parser.add_argument('--ys_end', type=float, default=None, help="Set the maximum y value to evaluate logprobs at.")
    parser.add_argument('--num_ys', type=int, default=None, help="Number of ys to evaluate logprobs at.")
    parser.add_argument('--mask_unused_tokens', type=bool, default=True, help=('If true mask out tokens not used in the prompt.'))
    return parser 


def parse_command_line(args=None):
    parser = init_option_parser()
    args = parser.parse_args(args=args)
    print(args, flush=True)
    return args